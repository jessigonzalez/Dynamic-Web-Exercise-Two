{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jessi\\\\Desktop\\\\exercise-Two-WeatherAPI\\\\Dynamic-Web-Exercise-Two\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jessi\\\\Desktop\\\\exercise-Two-WeatherAPI\\\\Dynamic-Web-Exercise-Two\\\\src\\\\containers\\\\Home\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../../App.css';\nimport PageWrapper from '../../components/PageWrapper/index.js';\n/*import WeatherIcon from\r\nimport '../../../components/PageWrapper/index.js';\r\n*/\n\nconst apiKey = '3d2204265a388f489c0c0be84b54f0f8';\nexport default function Home(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        isError = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errorMessage = _useState4[0],\n        setErrorMessage = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        success = _useState6[0],\n        isSuccess = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        city = _useState8[0],\n        setCity = _useState8[1];\n\n  const _useState9 = useState({}),\n        _useState10 = _slicedToArray(_useState9, 2),\n        weather = _useState10[0],\n        setWeather = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        cloudy = _useState12[0],\n        setCloudy = _useState12[1];\n\n  function queryWeatherAPI(queryCity) {\n    axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(queryCity, \"&APPID=\").concat(apiKey)).then(function (response) {\n      // console.log('response', response);\n      setWeather(response);\n      return response;\n    }).catch(function (error) {\n      console.log('error', error);\n      return error;\n    });\n  }\n  /*\r\n  useEffect(() => {\r\n    setCity('London');\r\n    queryWeatherAPI('London');//cant be {city} bc it is not fully set yet in setCity\r\n    console.log('weather test', queryWeatherAPI('London'));\r\n    }, []);\r\n  */\n\n\n  function apiCallback(response) {\n    // console.log('response',response)\n    if (response.status !== 200) {\n      isError(true);\n      setErrorMessage(\"\".concat(response.status, \": \").concat(Error));\n    } else {\n      isSuccess(true);\n    }\n\n    setWeather(response.data);\n  }\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(props.location.search);\n    const cityParam = urlParams.get('city') ? urlParams.get('city') : 'London';\n    setCity(cityParam);\n    queryWeatherAPI(cityParam);\n  }, []);\n  console.log('new one', weather);\n  /*useEffect(() => {\r\n  }, [weather]);*/\n\n  /*\r\n    useEffect(() => {\r\n      let getWeatherType = weather.data ? weather.data.weather[0].main : '';\r\n      let getCloudy = weather.clouds ? weather.clouds.all : 0;\r\n      setWeather(getWeatherType)\r\n      setCloudy(getCloudy)\r\n    }, [weather]);\r\n  */\n  // console.log('weather', weather);\n\n  return (\n    /*\r\n    <div>\r\n      <h1>Weather in {city}</h1>\r\n      <p>Humidity: {weather.data && weather.data.main.humidity}</p>\r\n    </div>\r\n    */\n    React.createElement(PageWrapper, {\n      cloudy: cloudy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"WeatherNav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"WeatherNav__Item \".concat(city == 'Seoul' ? 'WeatherNav__Item--active' : ''),\n      href: \"/?city=Seoul\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Seoul\"), React.createElement(\"a\", {\n      className: \"WeatherNav__Item \".concat(city == 'London' ? 'WeatherNav__Item--active' : ''),\n      href: \"/?city=London\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"London\"), React.createElement(\"a\", {\n      className: \"WeatherNav__Item \".concat(city == 'Miami' ? 'WeatherNav__Item--active' : ''),\n      href: \"/?city=Miami\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Miami\"), React.createElement(\"a\", {\n      className: \"WeatherNav__Item \".concat(city == 'Chicago' ? 'WeatherNav__Item--active' : ''),\n      href: \"/?city=Chicago\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Chicago\")), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" Weather in: \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, city)), error && React.createElement(\"div\", {\n      className: \"errorMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, errorMessage), success && React.createElement(\"div\", {\n      className: \"successMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Weather query successful!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, weather.weather ? weather.weather[0].main : ''), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Current Temp: \", weather.data && weather.data.main.temp), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"High Temp: \", weather.data && weather.data.main.temp_max), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Low Temp: \", weather.data && weather.data.main.temp_min), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Cloudiness: \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Humidity: \", weather.data && weather.data.main.humidity), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Wind Speed: \"))\n  );\n}\n/*\r\nWeather Type (ex. Cloudy)\r\nCurrent Temperature\r\nHigh Temperature\r\nLow Temperature\r\nCloudiness\r\nHumidity\r\nWind Speed\r\n*/\n\n/*<p>Humidity: {weather.main && weather.main.humidity}</p>*/\n\n/*<WeatherIcon weatherValue={weatherType}/>*/\n\n/*\r\nuseEffect(() => {\r\n  let getWeatherType = weather.weather ? weather.weather[0].main : '';\r\n  let getCloudy = weather.clouds ? weather.clouds.all : 0;\r\n  setWeatherType(getWeatherType)\r\n  setCloudy(getCloudy)\r\n}, [weather]);\r\n*/\n//<p>{weatherType}</p>","map":{"version":3,"sources":["C:\\Users\\jessi\\Desktop\\exercise-Two-WeatherAPI\\Dynamic-Web-Exercise-Two\\src\\containers\\Home\\index.js"],"names":["React","useEffect","useState","axios","PageWrapper","apiKey","Home","props","error","isError","errorMessage","setErrorMessage","success","isSuccess","city","setCity","weather","setWeather","cloudy","setCloudy","queryWeatherAPI","queryCity","get","then","response","catch","console","log","apiCallback","status","Error","data","urlParams","URLSearchParams","location","search","cityParam","main","temp","temp_max","temp_min","humidity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport '../../App.css';\r\nimport PageWrapper from '../../components/PageWrapper/index.js'\r\n/*import WeatherIcon from\r\nimport '../../../components/PageWrapper/index.js';\r\n*/\r\nconst apiKey = '3d2204265a388f489c0c0be84b54f0f8';\r\n\r\nexport default function Home(props){\r\n  const [error,isError] = useState(false)\r\n  const[errorMessage, setErrorMessage] = useState('')\r\n\r\n  const [success, isSuccess] = useState(false)\r\n\r\n  const [city, setCity] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n  const [cloudy,setCloudy] = useState(0);\r\n\r\n  function queryWeatherAPI(queryCity){\r\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${queryCity}&APPID=${apiKey}`)\r\n    .then(function(response){\r\n      // console.log('response', response);\r\n      setWeather(response);\r\n\r\n      return response;\r\n    })\r\n\r\n    .catch(function(error){\r\n      console.log('error', error);\r\n      return error;\r\n    });\r\n  }\r\n\r\n  /*\r\n  useEffect(() => {\r\n    setCity('London');\r\n    queryWeatherAPI('London');//cant be {city} bc it is not fully set yet in setCity\r\n    console.log('weather test', queryWeatherAPI('London'));\r\n    }, []);\r\n  */\r\n\r\n  function apiCallback(response){\r\n    // console.log('response',response)\r\n    if(response.status !== 200){\r\n      isError(true);\r\n      setErrorMessage(`${response.status}: ${Error}`);\r\n    }\r\n    else{\r\n      isSuccess(true)\r\n    }\r\n    setWeather(response.data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(props.location.search)\r\n    const cityParam = urlParams.get('city') ? urlParams.get('city') : 'London';\r\n\r\n    setCity(cityParam);\r\n\r\n    queryWeatherAPI(cityParam);\r\n\r\n  },[]);\r\n  console.log('new one', weather);\r\n\r\n  /*useEffect(() => {\r\n  }, [weather]);*/\r\n\r\n/*\r\n  useEffect(() => {\r\n    let getWeatherType = weather.data ? weather.data.weather[0].main : '';\r\n    let getCloudy = weather.clouds ? weather.clouds.all : 0;\r\n    setWeather(getWeatherType)\r\n    setCloudy(getCloudy)\r\n  }, [weather]);\r\n*/\r\n  // console.log('weather', weather);\r\n\r\n\r\n\r\n  return(\r\n    /*\r\n    <div>\r\n      <h1>Weather in {city}</h1>\r\n      <p>Humidity: {weather.data && weather.data.main.humidity}</p>\r\n    </div>\r\n    */\r\n    <PageWrapper cloudy={cloudy}>\r\n      <div className=\"WeatherNav\">\r\n        <a className={`WeatherNav__Item ${city =='Seoul' ? 'WeatherNav__Item--active' : ''}`} href=\"/?city=Seoul\">Seoul</a>\r\n        <a className={`WeatherNav__Item ${city =='London' ? 'WeatherNav__Item--active' : ''}`} href=\"/?city=London\">London</a>\r\n        <a className={`WeatherNav__Item ${city =='Miami' ? 'WeatherNav__Item--active' : ''}`} href=\"/?city=Miami\">Miami</a>\r\n        <a className={`WeatherNav__Item ${city =='Chicago' ? 'WeatherNav__Item--active' : ''}`} href=\"/?city=Chicago\">Chicago</a>\r\n      </div>\r\n\r\n\r\n      <h1> Weather in: <span>{city}</span></h1>\r\n\r\n      {error && <div className = \"errorMessage\">{errorMessage}</div>}\r\n      {success && <div className = \"successMessage\">Weather query successful!</div>}\r\n      <p>{weather.weather ? weather.weather[0].main : ''}</p>\r\n      <p>Current Temp: {weather.data && weather.data.main.temp}</p>\r\n      <p>High Temp: {weather.data && weather.data.main.temp_max}</p>\r\n      <p>Low Temp: {weather.data && weather.data.main.temp_min}</p>\r\n      <p>Cloudiness: </p>\r\n      <p>Humidity: {weather.data && weather.data.main.humidity}</p>\r\n      <p>Wind Speed: </p>\r\n    </PageWrapper>\r\n  );\r\n}\r\n/*\r\nWeather Type (ex. Cloudy)\r\nCurrent Temperature\r\nHigh Temperature\r\nLow Temperature\r\nCloudiness\r\nHumidity\r\nWind Speed\r\n*/\r\n\r\n/*<p>Humidity: {weather.main && weather.main.humidity}</p>*/\r\n\r\n/*<WeatherIcon weatherValue={weatherType}/>*/\r\n\r\n\r\n/*\r\nuseEffect(() => {\r\n  let getWeatherType = weather.weather ? weather.weather[0].main : '';\r\n  let getCloudy = weather.clouds ? weather.clouds.all : 0;\r\n  setWeatherType(getWeatherType)\r\n  setCloudy(getCloudy)\r\n}, [weather]);\r\n*/\r\n\r\n\r\n//<p>{weatherType}</p>\r\n"]},"metadata":{},"sourceType":"module"}